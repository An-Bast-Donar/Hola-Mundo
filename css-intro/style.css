/*
¿QUE ES CSS?
Significa Cascading Style Sheets.
Describe la presentacion de docs HTML.
Un doc HTML puede tener multiples CSS.
*/

/*
NOTAS
CSS funciona en base a selectores que referencian un unico o varios elementos dentro de nuestro HTML.
Los que se escriba de ultimo en nuestro archivo css tiene proridad sobre lo que va antes.
Una etiqueta en el HTML puede tener multiples clases de css.
*/

/*Aplica estilo a la etiqueta body*/
body {
    background-color: azure;
}

/*Aplica estilo a la etiqueta con id titulo*/
#titulo {
    color: brown;
}

.especial {
    color: blue;
}

/*Aplica estilo a las etiquetas con clase parrafo*/
.parrafo {
    color: chocolate;
}

/*Aplica estilo a las etiquetas p con clase parrafo. sirve para cuando una clase es compartida por etiquetas de diferente tipo*/
p.parafo {}

p.especial {}

/*Las etiqeutas p dentro de un div*/
div p {
    color: chartreuse;
}

/*Los h2 dentro de las etiquetas div*/
div h2 {}

/*Los h2 dentro de las etiquetas div y todos los h3*/
div h2,
h3 {}

/*Los h2 dentro de las etiquetas div y los h3 dentro de las etiquetas div*/
div h2,
div h3 {}

/*
Selecciona todos los elementos dentro del html
Las propiedades aplican a los elementos que no tengan definidas dichas propiedades en otro selector css
*/
* {
    font-size: 24px;
    /*
    buena tecnica para maquetacion de una pagina
    border: 1px black solid;
    */
}

/*La propiedad color modifica el color de la fuente o el texto dentro de nuestra etiqueta, se pueden usar valores, relativos de lenguaje natural, hexadecimales, rbg y hsl*/
.color1 {
    color: red
        /*lenguaje natural*/
}

.color2 {
    color: #F00
        /* #F00 Ó #FF0000*/
        /*
        Valores hexadecimales, pueden tener 3 o 6 caracteres, 0 es el valor de la mayor ausencua de color y f el valor con la mayor intensidad de color.
        Valores hexadecimales: 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - A - B - C - D - E - F.
        3 caracteres: primer digito: rojo, segundo digito: verde, tercer digito: azul.
        6 caracteres: primeros 2 digitos: rojo, segundos 2 digitos: verde, terceros 2 digitos: azul.
        #000000(negro: ausencia de todos los colores) - #FFFFFF(blanco: presencia de todos los colores).
        */
}

.color3 {
    color: rgb(255, 0, 0)
        /*Convencion rgb para mostrar colores, funciona igual que el hezadecimal, con la diferencia que los valores a indicar van del 0 al 255*/
        /*Convencion rgba para mostrar colores, funciona igual que el rgb pero incluye un cuarto parametro que indica la opacidad, toma valores del 0 al 1, donde 1 es un valor completamente solido y 0 un valor completamtne trasparente*/
}

/* la propiedad border muestra bordes en los elementos html, requiere el tamaño del borde, el color y el estilo del mismo*/
.borde1 {
    border: 5px green dashed;
    /*
    dotted
    dashed
    solid
    double
    groove (elemento tridimencional, el color afecta el estilo dle borde)
    ridge (elemento tridimencional, el color afecta el estilo dle borde)
    inset (elemento tridimencional, el color afecta el estilo dle borde)
    outset (elemento tridimencional, el color afecta el estilo dle borde)
    none
    hidden
    */
}

.borde2 {
    /*Nos permite indicar el estilo del borde sin necesidad del ancho ni el color*/
    border-style: solid;
    /*Nos permite seleccionar solo el color*/
    border-color: blue;
    /*Nos permite asignar un borde redondeado*/
    border-radius: 5px;
    /*Nos permite asignar el ancho del borde*/
    border-width: 5px;
}

/*
UNIDADES DE MEDIDA
px: pixel, unidad minima dentro de la web para poder mostrar algo, trata de hacer referencia a exactametne un cuadrado fisico en pantalla que compone la imagen, pero dependiendo de la pantalla realmente la unidad puede hacer referencia a mas de un pixel fisico.
cm(centimetro), mm(milimetro), in(pulgada), pt(puntos, un setenta y doceabo de pulgada), pc(picas, 12 puntos): medidas "absolutas" que no van a cambiar, no recomendable por que los dispositivos muestran estas medidas de diferente forma.
em: tamaño de la fuente del contenido de la etiqueta, medida relativa al tamaño del contenido.
rem: tamaño de la fuente de nuestra etiqueta raiz, osea la etiqueta html, por defecto el tamaño de la fuente en html es 16px, a menos que se cambie.
*/

#fondo1 {
    /*Color de fondo*/
    background-color: rebeccapurple;
    /*Opacidad del elemento completo, 1 color solido, 0 color trasparente*/
    opacity: 0.5;
}

#fondo2 {
    /*Alto del contenedor*/
    height: 400px;
    /*Recibe una url con la ruta donde esta almacenada la imagen a mostrar*/
    background-image: url('img/coffee.png');
    /*Ajusta el tamaño de la imagen*/
    background-size: cover;
    /*
    cover: adapta el tamaño de la imagen al tamaño del contenedor, sin cambiar la relacion de aspecto pero si la porcion de la imagen mostrada segun la diferencia de tamaños entre la imagen y el contenedor
    auto: incrusta la imagen con su tamaño original dentro del contenedor y se muestra la porcion de la imagen que coincide con el tamaño del contenedor, la imagen se repite si el contenedor es mas grande
    contain: ajusta el tamaño de la imagen al del contenedor sin cambiar la relacion de aspecto, si el contenedor es mas grande al nuevo tamaño de la imagen ajustado, entonces la imagen se empieza a repetir
    */
}

#fondo3 {
    height: 1200px;
    background-color: rebeccapurple;
    background-image: url('img/coffee.png');
    /*
    Ajusta el tamaño de la imagen, indicandole el ancho y luego el alto
    Al indicar las medidas de la imagen si se cambia la relacion de aspecto y se incrusta la imagen en el contenedor, si el tamaño del contenedor es mayor al nuevo tamaño ajustado de la imagen, esta se repite
    El tamaño de la imagen se debe declarar despues de definir la imagen con la propiedad background-image, si no la propiedad se anula, puesto que cuando es interpretada, no hay imagen para redimencionar
    */
    background-size: 400px 400px;
    /*
    Gestiona la repeticion de la imagen dentro del contenedor y puede tomar varios valores   
    repeat-x: solo se repite a lo largo de x
    repeat-y: solo se repite a lo largo de y
    no-repeat: no se repite la imagen
    mas valores por estudiar, comprender e interiorizar
    */
    background-repeat: repeat-y;
    /*
    Gestiona la poscicion en la cual se empieza a repetir la imagen
    Recibe la poscicion en x de donde empieza y la poscicion en y, con los valores right, left y center para las poscicion y y top bottom y center para la poscicion x
    tambien se le pueden enviar la poscicion con las demas unidades de medida vistas, px, mm, rem, etc
    */
    background-position: left top;
    /*
    Podemos simplificar todas estas propiedades, con la siguiente sentencia, refenrente a la propiedad background
    background: rebeccapurple url('img/coffee.png') repeat-y left top; y añadiendo el background-size posterior a la propiedad background
    o inclusibe podemos simplificar a un mas la propiedad y añadir el tamaño dentro de la misma propiedad background de la siguiente manera
    background: rebeccapurple url('img/coffee.png') repeat-y left top / 400px 400px;
    */
}

/*
La celda de una etiqueta se estructura en un margin que envuelve un borde y este envuelve un padding y este envuelve el contenido
Esta estructura asi como las propiedades que modifican el estilo de la etiqueta se pueden ver en el inspeccionador de elementos del navegador
*/
.margen1 {
    background: wheat;
}

.margen2 {
    background: beige;

    /*
    Da margenes a un lado espesifico del contenedor
    margin-top: ;
    margin-bottom: ;
    margin-left: ;
    margin-right: ;
    La etiqueta margin da margenes a todos los lados de nuestro contenedor en el orden de: top, right, bottom, left
    Si se le envia un solo valor a la propiedad margin, todos los lados toman ese valor
    Si se le mandan dos valores el primero es el valor vertical y el segundo el horizontal
    Si se le mandan tres valores el primero es el valor superior, el segundo el horizontal y el tercero el inferior
    */
    margin: 15px 20px 25px 30px;

    border: 1px black solid;

    /*
    da padding a un lado espesifico del contenedor
    padding-top: ;
    padding-bottom: ;
    padding-right: 
    padding-right: ;
    La etiqueta padding da padding a todos los lados de nuestro contenedor en el orden de: top, right, bottom, left
    Si se le manda 1, 2 o 3 valores tiene el mismo comportamiento que el margin
    */
    padding: 30px 25px 20px 15px;
}

.contenedor {
    height: 100px;
    width: 100px;

    border: 1px black solid;

    /*Borde que esta entre el borde real y el margen y toma las mismas caracteristicas y propiedades de un borde*/
    outline: 1px orange solid;

    background: thistle;

    /*
    La etiqueta overflow gestiona como se muestra el contenido de la etiqueta
    Por defecto su valor es visible, muestra el contenido de la etiqueta asi este se salga del contenedor
    El valor hidden oculta el contenido por fuera del tamaño del contenedor
    El valor scroll, crea dos barras, una lateral y otra horizontal para dezplazarse por el contenido dentro de la etiqueta, estas barras se ubican entre el padding y el borde
    */
    overflow: scroll;
}

.texto {
    width: 500px;
    border: 1px black solid;
    color: black;

    /*
    Fuente del texto
    Intenta cargar una fuente, si no puede, carga la siguiente y asi hasta la fuente final, que si tampoco puede cargarla carga la de por defecto del html
    Si el nombre de la fuente contiene espacios se escribe entre comillas simples
    font-family: 'Courier New', Courier, monospace;
    Si quiero usar una fuente descargada de internet, puedo por ejemplo obtener una fuente gratuita de google font, copiar los links que me proporsiona esa fuente he incluirlos en mi html > head, como esta echo actualmente en el proyecto
    */
    font-family: 'Bungee Spice', 'Courier New', Courier, monospace;

    /*
    Centra el texto de la etiqueta, valor por defecto: left
    Otros valores que puede tomar: center, right, justify
    */
    text-align: justify;

    /*
    none (por defecto)
    underline
    line-through
    overlines
    */
    text-decoration: line-through;

    /*
    Crea una sombra de el texto
    Dos valores: valor hacia la derecha, valor hacia abajo
    Tres valores: valor hacia la derecha, valor hacia abajo, color
    Cuarto valores: valor hacia la derecha, valor hacia abajo, difuminado, color
    */
    text-shadow: 3px 5px 5px blue;
}

/*
Los links en HTML pueden tener 4 diferentes estados
Cuando nunca han sido visitados (selector a:link)
Cuando han sido visitados (selector a:visited)
Cuando se pasa el mouse por encima de el (selector a:hover)
Cuando se encuentra activo, osea al momento de clickearlo (a:active)
Se pueden utilizar unos o algunos de estos selectores, pero deben agregarse en este orden, link, visited, hover, active
*/
a:link {
    color: blueviolet;
}

a:visited {
    color: gray;
}

a:hover {
    color: yellowgreen;
}

a:active {
    color: brown;
}

ul {
    overflow: hidden;
    text-align: justify;
    width: 500px;
    background-color: aqua;
    /*
    Modifica la viñeda de cada item de la lista
    list-style-type: none;
    Los items tienen un valor por defecto de 40 de padding a la izquiera, el cual puede modificarse
    padding-left: 0;
    Si quiero que las viñeras esten dentro del contenido de la etiqueta y no en el padding puedo cambiar la posicion de las mismas
    list-style-position: inside;
    */
}

table {
    width: 100%;
    /*
    Gestiona la separacion entre celdas
    */
    border-collapse: collapse;
}

th,
td {
    border: solid 1px lightgray;
    padding: 5px;
}

th {
    background-color: lightcoral;
    color: white;
}

/*
Nos permite seleccionar eleventos particulares
odd: par
even: par
Este selector debe ir antes del selector hover
*/
tr:nth-child(odd) {
    background-color: lightgray;
}

/*
El selector de hover tambien se puede usar para mas etiquetas, como por ejemplo tr
*/
tr:hover {
    background-color: gray;
    color: white;
    /*
    Gestionar el iciono del cursor
    */
    cursor: pointer;
}

.inline {
    /*
    Gestiona como se visualiza la etiqueta
    inline. en la misma linea, no se le puede asignar altura
    ilnide-block. en la misma linea, se le puede asignar altura
    */
    display: inline;
    border: greenyellow solid 1px;
}

span {
    /*
    display: block; es el que viene por defecto en la mayorita de etiqeutas de html
    propiedad none: desaparece/oculta elementos
    */
    display: block;
    /*
    Indica el ancho maximo del elemento, pero puede tomar valores menores por diferetes razones
    */
    max-width: 300px;
    background-color: #F00;
    border: black solid 1px;
}

.visibilidad {
    /*
    Gestiona la visualizacion de los elementos
    */
    visibility: hidden;
}

#position {
    color: black;
    /*
    static: viene por defecto en todas las etiquetas de html
    fixed: posicion fija sobre lo que visualizamos en el navegador, con lo que anteriormente se hacian los menus estaticos de pantalla
    absolute: relativo al elemento padre mas cercano
    sticky: mantiene el elemento en su posicion mientras se ve en pantalla, si el elemento sale de pantalla toma el valor relativo indicado
    */
    position: static;
    /*
    relative: posicion relativa segun otras medidas indicadas
    Distancia a la que se debe mover desde la izquiera, tambien existe top, rigth, right, bottom
    left: 20px;
    */
}

.contenedorizqder {
    border: black solid 2px;
    overflow: hidden;
}

.izquierda {
    /*
    Toma el elemento y lo ubica en la posicion indicada dentro de su padre
    */
    float: left;
    border: red solid 2px;
    width: 200px;
    height: 200px;
}

.derecha {
    border: blue solid 2px;
}

/*
Para poder centrar un elemento siempre se le debe indicar un ancho, un margen
*/
.center {
    /*Centrar contenido horizontal*/
    width: 200px;
    margin: 0 auto;
    /*Centrar contenido vertical*/
    padding: 50px;
    /*Centrar texto*/
    text-align: center;
    background-color: antiquewhite;
}

/*
Flexbox es una tecnica de maquetacion con css que permite crear layouts y organizar los elementos de mejor manera dentro de una pagina
*/
.flexcontainer {
    border: 1px solid #000;
    background-color: thistle;
    /*
    flex: otro tipo de organizacion para el display
    Si el contenido no tiene una altura por defecto, ocupan el 100% de la etiqeuta padre
    */
    display: flex;
    height: 360px;
    /*
    Determina como se acomodan los elementos dentro de este contenedor, algunos de sus valores pueden ser column, row, column-reverse, row-reverse
    flex-direction: row;
    */
    /*
    Gestiona la cantidad de elementos por linea
    El valor nowrap (valor por defecto) acomoda tantos como se puedan en una misma linea
    El valor wrap los distribuye en varias lineas repetando el tamaño de cada subcontenedor
    Tambien puede tomar el valor wrap-reverse, para que los elementos se pinten desde el ultimo hasta el primero
    flex-wrap: wrap;
    */
    /*
    Propiedad que me permite remplazar las propiedades flex-direction y flex-wrap
    El primer valor es para flex-direction y el segundo valor es para flex-wrap
    */
    flex-flow: row wrap;
    /*
    Ordena los elementos dentro del contenedor
    space-between: se crean espacios entre los elemntos hijos para que ocupen el 100% del tamaño del padre
    space-around: cada elemento hijo se rodea de un espacio igual al resto para ocupar el 100% del tamaño del padre
    space-evenly: los elementos hijos se separan entre ellos mismos y los borden del contenedor padre con el mismo valor de espaciado
    center: centra los elementos hijos
    flex-start: empiezan los elementos al inicio del contenedos
    flex-end: empizan los elementos al final del contenedor
    */
    justify-content: space-between;
    /*
    El espacio entre contenido
    Tiene los mismos valores que justify-content
    */
    align-content: flex-start;
    /*
    Ubica los items dentro del contenedor, tiene practicamente que los mismos valores de justify-content y align-content
    En caso de no tener tamaño los subitems, con el valor flex-start se adaptan al menor tamaño posible para ellos y se ubican arriba del contenedor padre
    flex-end: los ubica al final del contenedor y les adapta el tamaño al menor posible
    center: los ubica en el centro del contenedor y de no tener tamaño les da el menor posible
    stretch: los expande a lo alto o ancho del contenedor dependiendo las demas propiedades (es el valor por defecto)
    Jugando con las propiedades justify-content, align-content y align-items se le puede dar un maquetado o estilo a mis items dentro de mi contenedor padre con flex
    */
    align-items: flex-start;
}

.caja {
    border: 1px solid #000;
    background-color: white;
    color: black;
    font-family: 'Courier New', Courier, monospace;
    font-weight: bold;
    width: 120px;
    height: 120px;
    /*
    Sombreado a la etiqueta
    Desplazamiento a la derecha, desplazamiento hacia abajo, difuminacion, color
    */
    box-shadow: 0 0.1rem 0.4rem rgba(0, 0, 0, 0.3);
    /*Texto centrado horizontalmente*/
    text-align: center;
    margin: 5px;
}

.c1 {
    background-color: lightblue;
    /*
    A los subelementos de un display:flex se le puede cambiar el orden en el que se visualizan en pantalla
    */
    order: 2;
    /*
    Prioridad de expancion del elemento
    */
    flex-grow: 1;
    /*
    El elemento se expande en funcion del tamaño total de su contenedor padre
    Es un buen complemento para flex-grow y debe jugarse con el y el flex-basic de otros elementos hermanos para proporcional los tamaños ideales al diseño
    flex-basis: 50%;
    */
}

.c2 {
    background-color: lightcoral;
    order: 1;
    flex-grow: 2;
}

.c3 {
    background-color: lightgreen;
    width: 80px;
    height: 200px;
    order: 3;
}

/*
Grid sirve para maquetar una web (hacer el layout), no solo en una dimension, si tanto en horizontal como vertical y hacer una cuadricula que se adecue al sitio web que estabos construyendo
Si quiero visualizar el grip desde el inspector en el navegador, debo seleccionar el elemento con grip, irme al apartado layout y seleccionar la opcion mostrar grip
*/
.grid-layout {
    /*
    Propiedad grid para crear el layout de mi pagina
    */
    display: grid;
    /*
    Cantidad de columnas de mi grid
    Se le envian los valores del tamaño de cada columna, puede el vaor ser auto para que que auto adapte el tamaño al espacio disponible
    */
    grid-template-columns: 50% 20% auto;
    /*
    Cantidad y tamaño de las filas, toma los mismos valores que la etiqueta para el tamaño de las columnas
    */
    grid-template-rows: auto;
    /*
    Gestiona la posicion de las columnas, toma los mismos valores que si se usara el display:flex
    */
    justify-content: stretch;
    border: 1px solid #000;
    background-color: whitesmoke;
    font-family: Arial, Helvetica, sans-serif;
    width: 80%;
    padding: 15px;
    margin: 0 auto;
}

.box {
    border: 2px solid #000;
    background-color: lightgray;
    text-align: center;
    height: 120px;
}

/*
Caracteristicas individuales para elementos de css grid hijos del elemento que contenda display:grid (grid-layout)
*/
.b01 {
    /*
    Indica cuantas columnas va a ocupar este elemento dentro del grid
    Se le indica de que linea a que linea del grid se extiende
    En este caso este elemento se extienende desde la linea 1 hasta la 4
    */
    grid-column: 1/4;
    background-color: lightblue;
}

.b02 {
    /*
    Palabra reservada span, para indicarle al item cuanto se expandira desde la primera linea
    */
    grid-column: 1/ span 2;
    background-color: aquamarine;
}

.b04 {
    height: auto;
    /*
    Indica cuantas filas se expande el item tambien se le puede añadir la palabra reservada spam
    */
    grid-row: 3/5;
    background-color: lightsalmon;
}

.b07 {
    height: auto;
    width: auto;
    /*
    Tambien puedo expandir una area desde un punto #lineacolumna/#lineafila hasara un punto #lineacolumna/#lineafila
    Con la propiedad grid-area
    */
}

.b10 {
    grid-column: 2/4;
    background-color: limegreen;
}

.b11 {
    grid-column: 1/4;
    background-color: darkturquoise;
}

.distribucion-page {
    display: grid;
    /*
    Crea un arreglo de columnas y filas donde se posicionaran los elemenos con esa etiqueta en su propiedad grid-area
    Los elementos individuales hijos de la etiqueta con esta clase, deben contener en su css su etiqueta en grid-area para que esta distribucion funcione correctamente
    */
    grid-template-areas: 'cabecera cabecera'
        'menu menu'
        'contenido barralateral'
        'footer footer';
    /*
    Otra distribucion de un grid-template-areas para dejar un espacio vacio entre el layout de la pagina
    grid-template-areas:
        "nav-header  nav-header  nav-header  nav-side"
        "main-body   main-body   .           nav-side"
        "footer      footer      footer      footer";
    */

    /*
    Le modifico el tamaño a las filas ya creadas
    */
    grid-template-rows: 20% 10% auto 10%;
    grid-template-columns: auto 15%;
    height: 600px;
    border: 1px solid #000;
    background-color: whitesmoke;
    font-family: Arial, Helvetica, sans-serif;

    /*
    Separacion entre filas y columnas
    row-gap: 10px;
    column-gap: 10px;
    */
}

.cont {
    border: 1px solid #000;
    background-color: lightgray;
    text-align: center;
}

.cabecera {
    /*
    Etiqueto el item, para que posteriormente se dibuja en el grip-template-areas
    */
    grid-area: cabecera;
    background-color: lightblue;
}

.menu {
    grid-area: menu;
    background-color: aquamarine;
}

.contenido {
    grid-area: contenido;
    background-color: lightsalmon;
}

.barralateral {
    grid-area: barralateral;
    background-color: limegreen;
}

.footer {
    grid-area: footer;
    background-color: darkturquoise;
}